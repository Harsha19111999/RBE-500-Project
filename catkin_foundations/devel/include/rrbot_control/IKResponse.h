// Generated by gencpp from file rrbot_control/IKResponse.msg
// DO NOT EDIT!


#ifndef RRBOT_CONTROL_MESSAGE_IKRESPONSE_H
#define RRBOT_CONTROL_MESSAGE_IKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rrbot_control
{
template <class ContainerAllocator>
struct IKResponse_
{
  typedef IKResponse_<ContainerAllocator> Type;

  IKResponse_()
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)  {
    }
  IKResponse_(const ContainerAllocator& _alloc)
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)  {
  (void)_alloc;
    }



   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;





  typedef boost::shared_ptr< ::rrbot_control::IKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rrbot_control::IKResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IKResponse_

typedef ::rrbot_control::IKResponse_<std::allocator<void> > IKResponse;

typedef boost::shared_ptr< ::rrbot_control::IKResponse > IKResponsePtr;
typedef boost::shared_ptr< ::rrbot_control::IKResponse const> IKResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rrbot_control::IKResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rrbot_control::IKResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rrbot_control::IKResponse_<ContainerAllocator1> & lhs, const ::rrbot_control::IKResponse_<ContainerAllocator2> & rhs)
{
  return lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rrbot_control::IKResponse_<ContainerAllocator1> & lhs, const ::rrbot_control::IKResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rrbot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rrbot_control::IKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrbot_control::IKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rrbot_control::IKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rrbot_control::IKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrbot_control::IKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrbot_control::IKResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rrbot_control::IKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79ad2c92f4e03a043c435fd450b7abbe";
  }

  static const char* value(const ::rrbot_control::IKResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79ad2c92f4e03a04ULL;
  static const uint64_t static_value2 = 0x3c435fd450b7abbeULL;
};

template<class ContainerAllocator>
struct DataType< ::rrbot_control::IKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rrbot_control/IKResponse";
  }

  static const char* value(const ::rrbot_control::IKResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rrbot_control::IKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"\n"
;
  }

  static const char* value(const ::rrbot_control::IKResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rrbot_control::IKResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rrbot_control::IKResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rrbot_control::IKResponse_<ContainerAllocator>& v)
  {
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RRBOT_CONTROL_MESSAGE_IKRESPONSE_H
